#!/bin/bash

# This is a full autobuild wrapper script for DM's ROOter
# build script system. It assumes an already installed
# and working build environment.

# It will handle updating the build environment, and
# then work its way through a build of all the
# standard images. It also includes a lockfile
# system to ensure that two instances don't
# run at once. This lockfile is trapped so that
# it still gets removed if the script exits
# unexpectedly.

# A list of images to build must be included as parameters.

source /build/autobuild/autobuild19.conf

# If uid and gid environment variables are set, save them to use for
# a chown of the output file, otherwise default to the uid and gid
# of the build process (which will usually be 0:0)

OUID=${PUID:-0}
OGID=${PGID:-0}

# Save start time of build to track progress

SECSTART=$(date +%s)

splitout() {
        # Used to output the same text to both log and standard output.
        # If running in a Docker container, will send all output to
        # stdout instead.
        if [ -f /.dockerenv ] ; then
                echo "$*" >> /proc/1/fd/1
                if [ "$(readlink -f /proc/$$/fd/1)" != "$(readlink -f /proc/1/fd/1)" ] ; then echo "$*" >> /proc/$$/fd/1 ; fi
        else
                logger -t autobuilder "$*"
                echo "$*"
        fi
}

splitecho() {
        # Used to output the same text to standard output.
        # If running in a Docker container, will send all output to
        # stdout of #1 process instead.
        if [ -f /.dockerenv ] ; then
                echo "$*" >> /proc/1/fd/1
                if [ "$(readlink -f /proc/$$/fd/1)" != "$(readlink -f /proc/1/fd/1)" ] ; then echo "$*" >> /proc/$$/fd/1 ; fi
        else
                echo "$*"
        fi
}

cleanup() {
	# Removes the pidfile if it's there.
	[ -e $PIDFILE ] && rm -f $PIDFILE && splitout "Lock file has been removed."
	[ -f $FLAGFILE ] && rm -f $FLAGFILE
	# Assemble status file line, send to status file
	STATLINE="Finished $(date)"
	if [ -n "$ERRLIST" ] ; then
                STATLINE="$STATLINE, Errors: $ERRLIST"
        fi
	echo "$STATLINE" > $STATFILE
	# Clean any remaining zips from the images folder.
	rm -f $BUILDDIR/images/*.zip
	splitout "Cleanup completed."
}

checkfree() {
	# Checks current free space against min set above.
	# Error out and cancel further operations if min gets too small.
	CURFREEG=`df -h $BUILDPART | grep "dev" | awk '{print $4}'`
	CURFREE=`df $BUILDPART | grep "dev" | awk '{print $4}'`
	if [ $CURFREE -lt $MINFREE ] ; then
		splitout "Free space below min setting - $CURFREEG free. Exiting."
		exit 2
	fi
}

pushimage() {
	# This mostly duplicates the push19 script on the aturnofthenut server,
	# Which is used to push an output file in the images
	# directory straight into the autobuilds server folder,
	# while appending -AB to the name.
	# Input must be a single file, handle multiples before calling.

	SOURCE="$BUILDDIR/images"

	# Check if $1 exists, otherwise exit.
	if [ -z $1 ] ; then
		splitout "No file passed to pushimage, exiting."
		return 1
	fi

	# Parse the filename.
	FILE="$1"
	FROOT=${FILE%.*}
	FEXT=${FILE##*.}
	FDEST="$SERVEDIR/$FROOT$SUFFIX.$FEXT"

	# Move the file.
	# Note: THIS WILL OVERWRITE if there is an existing file.
	mv -f "$SOURCE/$1" "$FDEST"

	# chown the file to the output uid and gid.
	chown $OUID:$OGID $FDEST
}

is_int() { case ${1#[-+]} in '' | *[!0-9]* ) return 1;; esac ;}

success() {
	# This function is called after each successful build, to handle
	# getting the files into the right location. Pushing this code
	# into a function allows better branch control to let us handle
	# a first build failure without a lot of code duplication.

        splitout "$ROUTER built successfully."

        # Push this image to the server folder.
        # Following line automatically grabs first zip file in images,
        # this should be the only zip file if all is well.
        # OUTFILE=`ls "$BUILDDIR/images/" | grep ".zip" | head -n 1`
        # Above proved unreliable - use the start of the file name from the json.
        MOD=$(jshon -F $JSON -e $ROUTER -e mod | sed 's/"//g')
        splitout "Model is $MOD (pretty name)."
        OUTFILE=$(ls "$BUILDDIR/images/" | grep "$MOD" | head -n 1)
        splitout "Outfile is $OUTFILE"
        if [ -z $OUTFILE ] ; then
                # Outfile missing!
                splitout "Outfile is missing!"
                exit 6
        fi
        pushimage "$OUTFILE"
        OUTRESULT="$?"
        if [ $? -ne "0" ] ; then
                # Pushimage reports error
                splitout "pushimage error $OUTRESULT"
                exit 7
        fi

        # Check there are no extra images in the folder left over:

        if [ `ls -1 "$BUILDDIR/images/" | grep ".zip" | wc -l` -gt "0" ] ; then
                # Leftover mystery images! This is basically a crash condition.
                splitout "Too many images left in folder!"
                splitout "Extras: $(ls -x "$BUILDDIR/images/*.zip")
                # exit 5
                # Clean up.
                rm -f $BUILDDIR/images/*.zip
        fi

        # Report the success.
        splitout "$OUTFILE pushed to $SERVEDIR"

        # Short term statistics calc:
        SECCUR=$(date +%s)
        SECELAPSED=$(( $SECCUR - $SECSTART ))
        DAYELAPSED=$(( $SECELAPSED / 86400 ))
        SECAVG=$(( $SECELAPSED / $PROGRESS ))
        REMCOUNT=$(( $TARGETCOUNT - $PROGRESS ))
        REMSEC=$(( $REMCOUNT * $SECAVG ))
        SECETA=$(( $(date +%s) + $REMSEC ))

        # Long term statistics calc:
        IFINISH=$(date -u +%s)
        IELAPSED=$(( $IFINISH - $ISTART ))
        ILTAVG=$( jshon -Q -F $STATJSON -e ltavg | sed 's/"//g' )
        ILTIMG=$( jshon -Q -F $STATJSON -e images | sed 's/"//g' )
        [ "$ILTIMG" -gt "500" ] && ILTIMG="500"
        INEWIMG=$(( $ILTIMG + 1 ))
        IOLDPART=$(echo print $ILTAVG*$ILTIMG/$INEWIMG | perl)
        INEWPART=$(echo print $IELAPSED/$INEWIMG | perl)
        INEWAVG=$(echo print $IOLDPART+$INEWPART | perl)
        INEWAVG=$(echo "printf(\"%.0f\", $INEWAVG)" | perl)
        IREMSEC=$(( $REMCOUNT + $INEWAVG ))
        ISECETA=$(( $(date -u +%s) + $IREMSEC ))
        # Save the new info to the stats file
        echo $(jshon -Q -n {} -s $INEWIMG -i images -s $INEWAVG -i ltavg) > $STATJSON
        splitout "S:$ISTART F:$IFINISH E:$IELAPSED OP:$IOLDPART NP:$INEWPART A:$INEWAVG"

        splitout "Elapsed: $DAYELAPSED d, $(date -d @$SECELAPSED -u +%H:%M:%S), Avg: $(date -d @$SECAVG -u +%H:%M:%S), Finish: $(date -d @$SECETA -u)"
#        STATLINE="($PROGRESS/$TARGETCOUNT, $ERRNUM) Avg: $(date -d @$INEWAVG -u +%H:%M:%S), Finish: $(date -d @$ISECETA -u)"
	STATLINE="Blank for bug hunting."
	if [ -n "$ERRLIST" ] ; then
		STATLINE="$STATLINE, Errors: $ERRLIST"
	fi
        echo "$STATLINE" > $STATFILE
}

############################
# Start preparatory checks
############################


splitout '_______________________________________________________________'
splitout "Build started by user `whoami` at `date`"

# Check to verify autobuilder script is not already running.

if [ -e $PIDFILE ] ; then
	splitout "Lock file exists; autobuilder already running. Exiting."
	exit 1
fi

# We've confirmed this is the only copy running.
# Set the lockfile, and trap exits to run cleanup.

echo $$ > $PIDFILE && trap cleanup EXIT
trap 'break && exit 1' INT TERM

splitout "Lock file set. Pid is $$."

# Check if stats.json exists, if not create it with a default value.
if [ ! -f $STATJSON ] ; then
	# No statistics record, create a blank one with a default value.
	echo $(jshon -Q -n {} -s 1 -i images -s 1200 -i ltavg) > $STATJSON
fi

echo "Starting first image at $(date -u)..." > $STATFILE

touch $FLAGFILE

# cd into the build root.

if [ -d $BUILDDIR ] ; then
	cd $BUILDDIR
else
	splitout "$BUILDDIR does not exist. Exiting."
	exit 3
fi

# Check if a sequence number was provided, if so store it
# for use in numbering output files.
SEQNO=""
if [ $# -gt "0" ] ; then
	splitout "Parameters received: $*"
	if is_int $1 ; then
	# first parameter is a sequence number
	SEQNO="$1"
	shift
	splitout "Sequence number $SEQNO given."
	fi
fi

# Export the current build catalog, and assemble the list.

BUILDCAT=`$BUILDDIR/build LIST | tr '\n' ' '`

CATCOUNT=`echo "$BUILDCAT" | wc -w`

splitout "There are $CATCOUNT routers in the build catalog."

BUILDLIST=""

if [ $# -gt "0" ] ; then
	splitout "Build list given: $*"
	for ROUTER in $* ; do
		if [ `echo $BUILDCAT | grep -c "$ROUTER"` -gt "0" ] ; then
			# Router in build list.
			BUILDLIST="$BUILDLIST $ROUTER"
		else
			splitout "$ROUTER not in catalog."
		fi
	done
	splitout "Final build list is: $BUILDLIST"
else
	splitout "No build list given, cancelling."
	exit 99
fi

TARGETCOUNT=$(echo "$BUILDLIST" | wc -w)
PROGRESS="0"

# Check for disk space above minimum before starting.

checkfree

splitout "Initial disk space check passed."
splitout "Preparing the build loop for $TARGETCOUNT routers..."

if [ -f $BUILDOUTPUT ] ; then rm -f $BUILDOUTPUT ; fi				# Flush output file
if [ -f $BUILDERROR ] ; then rm -f $BUILDERROR ; fi				# Flush error file
if [ -f "$BUILDDIR/images/*.zip" ] ; then rm -f "$BUILDDIR/images/*.zip" ; fi	# Flush image folder

echo "Build $SEQNO started at `date`" > $BUILDOUTPUT
echo "Building:  $BUILDLIST" >> $BUILDOUTPUT
echo "Building $TARGETCOUNT routers." >> $BUILDOUTPUT
echo >> $BUILDOUTPUT

ERRLIST=""
RBLIST=""
ERRNUM="0"

############################
# Enter the main build loop.
############################

for ROUTER in $BUILDLIST ; do

	if [ -f $STOPFILE ] ; then
		splitout "STOPFILE FOUND! Exiting."
		exit 99
	fi

	let PROGRESS++
	splitout "($PROGRESS/$TARGETCOUNT, $ERRNUM) Starting on $ROUTER."

	# Save the current time for stats prep
	ISTART=$(date -u +%s)

	# Remove any stray output files from other router failures.
	LISTSTRAY=$(ls -x $BUILDDIR/images/*.zip)
	if [ -n "$LISTSTRAY" ] ; then splitout "Strays: $LISTSTRAY" ; fi
	rm -f $BUILDDIR/images/*.zip

	# Prep the BUILDOUTPUT file:
	echo "____________________" >> $BUILDOUTPUT
	echo >> $BUILDOUTPUT
	echo "Starting $ROUTER" >> $BUILDOUTPUT
	echo >> $BUILDOUTPUT
	echo "____________________" >> $BUILDOUTPUT
	echo >> $BUILDOUTPUT

	# Prep the BUILDERROR file:
	echo "START ROUTER $ROUTER" >> $BUILDERROR

	# Run the build script on the router.
	# We will nice this down by an additional 5 just in case.

	MAKEFLAGS=$MAKEFLAGS nice -n 5 $BUILDDIR/build $ROUTER >> $BUILDOUTPUT 2>> $BUILDERROR

	RESULT=$?

	echo "Return: $RESULT" >> $BUILDOUTPUT
	echo >> $BUILDOUTPUT

	# Check the result to see if build reported success.
	if [ $RESULT -ne "0" ] ; then
		# build reported a failure on first try. Document and clean up.
		splitout "Build of $ROUTER failed with result $RESULT. Flushing output images."
		if [ true ] ; then rm -f "$BUILDDIR/images/*.zip" && splitout "Images cleared." ; fi
		ERRFILE="$AUTODIR/output/$SEQNO.$ROUTER-`date -Idate`.err.txt"
		echo "$ROUTER `date`" > $ERRFILE
		echo >> $ERRFILE
		echo "STDERR:" >> $ERRFILE
		tail -n 200 $BUILDERROR >> $ERRFILE
		echo >> $ERRFILE
		echo "STDOUT:" >> $ERRFILE
		tail -n 200 $BUILDOUTPUT >> $ERRFILE
		echo >> $ERRFILE
		splitout "Errors written to $ERRFILE"

		# Try a make clean and rebuild once.
		splitout "Cleaning the build environment."
		make clean
		splitout "Attempting a second build."
		nice -n 5 $BUILDDIR/build $ROUTER >> $BUILDOUTPUT 2>> $BUILDERROR
	        RESULT=$?

		# Check results:
		if [ $RESULT -ne "0" ] ; then
			# build reported a failure the second time.
			# Document and clean up again.
			splitout "Clean reuild of $ROUTER failed with result $RESULT. Flushing output images."
			# New flush method to handle multiple files:
			DEADFILES=$(ls BUILDDIR/images/*.zip)
                	if [ true ] ; then rm -f "$BUILDDIR/images/*.zip" && splitout "Images cleared: $DEADFILES" ; fi
                	ERRFILE="$AUTODIR/output/$SEQNO.$ROUTER-`date -Idate`.rberr.txt"
                	echo "$ROUTER `date`" > $ERRFILE
                	echo >> $ERRFILE
                	echo "STDERR:" >> $ERRFILE
                	tail -n 200 $BUILDERROR >> $ERRFILE
                	echo >> $ERRFILE
                	echo "STDOUT:" >> $ERRFILE
                	tail -n 200 $BUILDOUTPUT >> $ERRFILE
                	echo >> $ERRFILE
                	splitout "Errors written to $ERRFILE"

			let ERRNUM++
			ERRLIST="$ERRLIST $ROUTER"
		else
			# rebuild reported success!
			RBLIST="$RBLIST $ROUTER"
			success
		fi
	else
		# build reported success!
		success
	fi
	# Loop done - proceed to next router.
done

splitout "Build loop $SEQNO has finished at `date`!"
splitout "Final buildlist: $BUILDLIST"
splitout "$ERRNUM unrecoverable errors: $ERRLIST"
if [ $RBLIST != "" ] ; then
	splitout "Clean rebuilds performed: $RBLIST"
fi
