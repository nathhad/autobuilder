#!/bin/bash

# This is a management script to track updates in the build environment and
# autobuild folder, including the option to generate lists of routers that
# need a rebuild or are missing from autobuild.

# This script is dependent upon jshon and the rooter build package.

######
#
# IMPORTANT: you MUST edit the following line to point to the
# config file you want to use for this instance of the script.
#
CONF=/serve/rooter/autobuild/autobuild19.conf
source $CONF
#
######

is_int() { case ${1#[-+]} in '' | *[!0-9]* ) return 1;; esac ;}

testdir() {
	if [ -d $1 ] ; then
		return 0
	else
		# Error - critical directory missing
        	echo 1>&2 "Directory $1 missing!"
        	echo 1>&2 "Check configuration file $CONF"
        	exit 1
        fi
}

extract_date() {
        MYDATE=${1##*-GO}
        MYDATE=${MYDATE%.zip}
        MYDATE=${MYDATE%-AB}
}

abexecute() {
	# Check to make sure we didn't get a null list.
	COUNT=$(echo $* | wc -w)
	if [ $COUNT -gt "0" ] ; then
		# Some routers provided.
		echo "Sending list $* to trigger file $TRIGGERFILE6"
		echo "$*" >> $TRIGGERFILE
	else
		# Empty list! Do nothing.
		echo "No routers in execute list - not executing trigger."
	fi
}

abhelp() {
cat 1>&2 <<EndOfHelp
Usage: abmanage [ -cep ] COMMAND [ parameter ]

Options:

   -c		Common routers only (per json instructions, not 
   		yet implemented).

   -e		Execute a build using the resulting router list.

   -p		Perform a git pull before performing the command.

Commands:

   HELP		Display this usage message.

   NEW		List routers which have no Autobuild images.

   PRUNE count	Prune older images if router has more than
   		the given count available in server directory.

   STALE days	List routers whose autobuild images are at least
   		the given number of days old.

   STATUS	List all routers in catalog, with summary of number
   		of images, earliest, and latest.

   STRAY	List all image files in the build directory which
   		no longer have a name in the catalog in a matching
   		format. This will usually represent routers with a
   		recent name change, which would be missed by a
   		prune action. Listed routers will be moved to
   		the trash directory in the conf file.

EndOfHelp
exit 1
}

abnew() {
	# Go through the list of routers, and add any router to OUTLIST that
	# doesn't have at least one image file in SERVEDIR.
	RLIST=$(jshon -k < $JSON | sort)
	for ROUTER in $RLIST
	do
		MOD=$(jshon -e "$ROUTER" -e mod < $JSON)
		MOD="${MOD%\"}"
		MOD=${MOD#\"}
		COUNT=$(ls $SERVEDIR | grep -c "$MOD-GO")
		if [ ! "$COUNT" -gt "0" ] ; then
			OUTLIST="$OUTLIST $ROUTER"
		fi
	done
	# OUTLIST now contains routers with no images built
	echo $OUTLIST

	# If execute flag set, execute an autobuild based on the output list.
	[ "$EXECUTE" -eq "0" ] && abexecute $OUTLIST
}

abprune() {
	# For a given number of images to keep, prune any superfluous images
	# over that number, starting with the oldest. Move the pruned images
	# into the trash directory set in the conf file.
	# Error out if an execute flag was passed:
        [ "$EXECUTE" -eq "0" ] && echo 1>&2 "PRUNE command does not support -e flag." && abhelp

	PTTL="0"

	RLIST=$(jshon -k < $JSON | sort)
        for ROUTER in $RLIST
        do
                MOD=$(jshon -e "$ROUTER" -e mod < $JSON)
                MOD="${MOD%\"}"
                MOD=${MOD#\"}
                COUNT=$(ls $SERVEDIR | grep -c "$MOD-GO")
                if [ "$COUNT" -gt "$1" ] ; then
                	# This router needs pruning. Make the list:
                	PCOUNT=$(expr "$COUNT" - "$1")
                	PLIST=$(ls $SERVEDIR | grep "$MOD-GO" | head -n "$PCOUNT")
                	for PRUNEFILE in $PLIST ; do
                		mv $SERVEDIR/$PRUNEFILE $TRASH/
                	done

                	# Files pruned for this router. Add to results list.
			[ -n "$OUTLIST" ] && OUTLIST="${OUTLIST}, "
                	OUTLIST="${OUTLIST}${ROUTER}: $PCOUNT"
                	PTTL=$(expr "$PTTL" + "$PCOUNT")
                fi
        done

        # Print a summary of results.
        echo "Pruned $PTTL images: $OUTLIST"
}

abpull() {
#	echo "Executing git pull of build environment:"
	git pull &>/dev/null
	if [ $? -ne "0" ] ; then
		echo 1>&2 "Error during git pull, aborting."
		exit 1
	fi
}

abstale() {
        # Go through the list of routers, and add any router to OUTLIST that
        # has images, and its newest image older than $1 days old (compared
        # in seconds since epoch)
	TODAY=$(date +%s)
	AGELIMIT=$(expr $1 \* 86400) # 86400 seconds in a day
	CUTOFF=$(expr $TODAY - $AGELIMIT)

        RLIST=$(jshon -k < $JSON | sort)
        for ROUTER in $RLIST
        do
                MOD=$(jshon -e "$ROUTER" -e mod < $JSON)
                MOD="${MOD%\"}"
                MOD=${MOD#\"}
                COUNT=$(ls $SERVEDIR | grep -c "$MOD-GO")
                if [ "$COUNT" -gt "0" ] ; then
                	# This router has at least 1 existing image.
                	FRONT="$MOD-GO"
                	LATEST=$(ls $SERVEDIR | grep "$FRONT" | tail -n 1)
                	# Trim the front and back off to get the date.
                	extract_date $LATEST
                	LATEST=$MYDATE
                	RDATESEC=$(date -d $LATEST +%s)
			if [ "$RDATESEC" -lt "$CUTOFF" ] ; then
				# Newest router image is older than cutoff
	                        OUTLIST="$OUTLIST $ROUTER"
	                fi
                fi
        done
        # OUTLIST now contains routers with no images built
        echo $OUTLIST

        # If execute flag set, execute an autobuild based on the output list.

	[ "$EXECUTE" -eq "0" ] && abexecute $OUTLIST
}

abstatus() {
	# Print a human-formatted status report.
	# Error out if an execute flag was passed:
	[ "$EXECUTE" -eq "0" ] && echo 1>&2 "STATUS command does not support -e flag." && abhelp

	# Get the key list:
	RLIST=$(jshon -k < $JSON | sort)

	# Find the longest router key name length:
	KEYLEN="0"
	for ROUTER in $RLIST
	do
		if [ ${#ROUTER} -gt "$KEYLEN" ] ; then
			KEYLEN="${#ROUTER}"
		fi
	done

	# Set width of key field to KEYLEN + 2
	KEYLEN=$(expr "$KEYLEN" + 2)

	# Report heading:
	echo "Autobuild System Status:"
	echo "   $(date)"
	printf  "%${KEYLEN}s  %-5s%-12s%-12s\n" "MODEL" "QTY" "NEWEST" "OLDEST"

	for ROUTER in $RLIST
	do
		# For each router in list, output a status line.

		# Get file name and image count:
		MOD=$(jshon -e "$ROUTER" -e mod < $JSON)
                MOD="${MOD%\"}"
                MOD=${MOD#\"}
                COUNT=$(ls $SERVEDIR | grep -c "$MOD-GO")

                # Get the oldest date:
                OLDEST=$(ls $SERVEDIR | grep "$MOD-GO" | head -n 1)
                extract_date "$OLDEST"
                OLDEST="$MYDATE"

                # Get the newest date:
                NEWEST=$(ls $SERVEDIR | grep "$MOD-GO" | tail -n 1)
                extract_date "$NEWEST"
                NEWEST="$MYDATE"

                # Print the status line.
                printf  "%${KEYLEN}s  %-5s%-12s%-12s\n" "$ROUTER" "$COUNT" "$NEWEST" "$OLDEST"
	done
}

abstray() {
	# Find all image files in serve folder not in the catalog, report
	# them in an output list, and move them all to the trash folder.

	# Get a starting list of all non-html files in the directory:
	DIRLIST=$(ls -1 "$SERVEDIR" | grep -v ".html")

	# Get a list of all the routers
	RLIST=$(jshon -k < $JSON | sort)

	# Cycle through the router list and remove all valid images from list.
	for ROUTER in $RLIST
        do
                MOD=$(jshon -e "$ROUTER" -e mod < $JSON)
                MOD="${MOD%\"}"
                MOD=${MOD#\"}
                # Remove everything from file list for this router:
                DIRLIST=$(echo "$DIRLIST" | grep -v "$MOD")
        done

        # Everything left in DIRLIST should now be a file or directory that
        # ISN'T a valid current catalog image.
        COUNT="0"
        OUTLIST=""
        for STRAY in $DIRLIST
        do
		if [ -f $SERVEDIR/$STRAY ] ; then
			# STRAY is a file, not a directory
	        	let COUNT++
        		OUTLIST="$OUTLIST $STRAY"
        		mv $SERVEDIR/$STRAY $TRASH/$STRAY
        	fi
        done

        # Report results.
        echo "Cleaned up $COUNT stray files: $OUTLIST"
}

COMMON=1	# All routers by default

EXECUTE=1	# Do not execute by default.
PULL=1		# Do not pull by default.
OUTLIST=""	# Start with blank output list.

# Parse input flags.
while getopts cep flag ; do
	case "${flag}" in
		c) COMMON=0 ;;
		e) EXECUTE=0 ;;
		p) PULL=0 ;;
		"?") abhelp ;;
	esac
done

shift $((OPTIND -1))

# Check param count.
if [ $# -lt 1 -o $# -gt 2 ] ; then
	abhelp
fi

# Test for the important directories.
testdir $BUILDDIR && cd $BUILDDIR
testdir $SERVEDIR
JSON="$BUILDDIR/routers.json"
if [ ! -f "$JSON" ] ; then
	 echo 1>&2 "$JSON missing!"
	 exit 1
fi

# Pull if requested
[ "$PULL" -eq "0" ] && abpull

# Sort on command.
case "${1^^}" in
	HELP) abhelp ;;
	NEW) abnew ;;
	PRUNE)
		if [ $# -eq 2 ] ; then
			is_int $2
			if [ $? -eq "0" ] ; then
				abprune "$2"
			else
				echo "Argument required: number of images to keep (integer)"
				abhelp
			fi
		else
			echo "Argument required: number of images to keep (integer)"
			abhelp
		fi
		;;
	STALE)
		if [ $# -eq 2 ] ; then
			is_int $2
			if [ $? -eq "0" ] ; then
				abstale "$2"
			else
				echo "Argument required: number of days (integer)"
                        	abhelp
			fi
		else
			echo "Argument required: number of days (integer)"
	                abhelp
		fi
		;;
	STATUS) abstatus ;;
	STRAY) abstray ;;
	*) abhelp ;;
esac

